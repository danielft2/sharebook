// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Usuario {
  id                String            @id @default(uuid())
  nome              String
  email             String            @unique
  telefone          String            @unique
  senha             String
  cep               String
  estado            String
  cidade            String
  foto_perfil       String?
  livro             Livro[]
  solicitacao       Solicitacao[]
  processo_de_troca ProcessoDeTroca[]
  alerta            Alerta[]
  avaliacao         Avaliacao[]
  generosFavoritos  GeneroUsuario[]
}

model Livro {
  id                String            @id @default(uuid())
  isbn              String
  nome              String
  sinopse           String?
  autor             String[]
  dono_publicacao   Usuario           @relation(fields: [usuario_id], references: [id])
  usuario_id        String
  edicao            Int               @default(1)
  idioma            String
  pode_buscar       Boolean           @default(false)
  quer_receber      Boolean           @default(true)
  capa              String
  imagens           String[]
  genero_livro      GeneroLivro[]
  estado            Estado            @relation(fields: [estado_id], references: [id])
  estado_id         String
  solicitacao       Solicitacao[]
  processo_de_troca ProcessoDeTroca[]
}

model GeneroLivro {
  livro     Livro  @relation(fields: [livro_id], references: [id])
  livro_id  String
  genero    Genero @relation(fields: [genero_id], references: [id])
  genero_id String

  @@id([livro_id, genero_id])
}

model GeneroUsuario {
  usuario    Usuario @relation(fields: [usuario_id], references: [id])
  usuario_id String
  genero     Genero  @relation(fields: [genero_id], references: [id])
  genero_id  String

  @@id([usuario_id, genero_id])
}

model Genero {
  id            String          @id @default(uuid())
  nome          String
  generoLivro   GeneroLivro[]
  GeneroUsuario GeneroUsuario[]
}

model Estado {
  id     String  @id @default(uuid())
  nome   String
  livros Livro[]
}

model Solicitacao {
  id                     String  @id @default(uuid())
  usuario_solicitante    Usuario @relation(fields: [usuario_solicitante_id], references: [id])
  usuario_solicitante_id String
  livro                  Livro   @relation(fields: [livro_id], references: [id])
  livro_id               String
  status                 String
}

model ProcessoDeTroca {
  id                     String  @id @default(uuid())
  usuario_solicitante    Usuario @relation(fields: [usuario_solicitante_id], references: [id])
  usuario_solicitante_id String
  livro                  Livro   @relation(fields: [livro_id], references: [id])
  livro_id               String
  status                 String
}

model Alerta {
  id                       String  @id @default(uuid())
  nome_livro               String
  usuario                  Usuario @relation(fields: [usuario_id], references: [id])
  usuario_id               String
  filtrado_por_localizacao Boolean @default(false)
  filtrado_por_envio       Boolean @default(false)
}

model Avaliacao {
  id                   String  @id @default(uuid())
  usuario_avaliador_id String
  nota                 Float
  comentario           String
  usuario_avaliado     Usuario @relation(fields: [usuario_avaliado_id], references: [id])
  usuario_avaliado_id  String
}
